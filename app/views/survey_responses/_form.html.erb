<% if survey_response.errors.any? %>
  <div id="error_explanation">
    <h2><%= pluralize(survey_response.errors.count, "error") %> prohibited this survey_response from being saved:</h2>

    <ul>
    <% survey_response.errors.full_messages.each do |message| %>
      <li><%= message %></li>
    <% end %>
    </ul>
  </div>
<% end %>

<div class="form-group">
  <label for="name">Name</label>

  <%= text_field_tag :name, nil, id: :name_text, class: 'form-control',
  placeholder: "Your Name (or some other identifier)" %>

  <small id="nameHelp" class="form-text text-muted">
    This will not be randomized.
  </small>
</div>

<% SurveyResponsesController::SURVEY_QUESTIONS.each_with_index do |q, i| %>
  <div class="form-group">
    <label for="question<%= i + 1 %>"><%= q[:long] %></label>

    <%=
      select_tag "q#{i + 1}", options_for_select(
        q[:choices].map.with_index { |x, k| [x, k] }
      ),
      id: "q#{i + 1}_text",
      class: 'form-control'
    %>

    <small id="q<%= i + 1 %>Help" class="form-text text-muted">
      This response will be randomized to protect privacy.
    </small>
  </div>
<% end %>

<%= form_with(model: survey_response, local: true, id: :survey_response_form) do |form| %>
  <%= form.hidden_field :name, id: "name" %>
  <%= form.hidden_field :question1, id: "q1" %>
  <%= form.hidden_field :question2, id: "q2" %>
  <%= form.hidden_field :question3, id: "q3" %>

  <div class="actions">
    <%= form.submit "Submit", class: "btn btn-primary" %>
  </div>
<% end %>

<script>
  $("#survey_response_form").on('submit', function() {
    $("#name").val($("#name_text").val())

    for (var i = 1; i <= 3; i++) {
      qtext = "q" + i
      $("#" + qtext).val($("#" + qtext + "_text").val())
    }

    return true
  })
  
  function difpriv(num1){
	// init epsilon to 1
	var epsilon = 1; 
	var num_of_entries = 5; // if changed stuff will break
	  
	// all possible return values
	var incorrect_return_values = [0,1,2,3,4]; 
	incorrect_return_values.splice( incorrect_return_values.indexOf(num1), 1 ); // remove num1
	
	var correct = Math.pow(Math.E,epsilon)/(Math.pow(Math.E,epsilon)+num_of_entries-1); // if y = v
	var incorrect = 1/(Math.pow(Math.E,epsilon)+num_of_entries-1); // if y != v
	
	// Total sum of correct and incorrect probabilities
	var total_prob = 4*incorrect + correct;
	
	// Get scaling factor to fit probabilities into [0,1]
	scaling = 1/total_prob;
	
	// scale the incorrect prob
	incorrect_prob = incorrect*scaling;
	
	// scale the correct prob
	correct_prob = correct * scaling;
	
	// get random number in [0,1]
	rand = Math.random();
	
	// output based on rand
	if (rand <= incorrect_prob){	
		return incorrect_return_values[0];
	} 
	else if (rand <= incorrect_prob*2){
		return incorrect_return_values[1];
	}
	else if (rand <= incorrect_prob*3){
		return incorrect_return_values[2];
	}
	else if (rand <= incorrect_prob*4){
		return incorrect_return_values[3];
	}
	else if (rand <= incorrect_prob*4+correct_prob){
		return num1;
	}
		
	

	  
	  
  }
</script>
